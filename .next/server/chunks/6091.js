"use strict";exports.id=6091,exports.ids=[6091],exports.modules={36091:(e,s,t)=>{t.d(s,{fromSSO:()=>g});var o=t(97110),i=t(39435);let r=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var n=t(71787);let a=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:r,ssoRegion:a,ssoRoleName:l,ssoClient:g,clientConfig:c,profile:w,logger:f})=>{let d,h;let u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let e=await (0,n.L)({profile:w})();d={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new o.mV(e.message,{tryNextLink:!1,logger:f})}else try{d=await (0,i.gH)(e)}catch(e){throw new o.mV(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:!1,logger:f})}if(new Date(d.expiresAt).getTime()-Date.now()<=0)throw new o.mV(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:!1,logger:f});let{accessToken:m}=d,{SSOClient:_,GetRoleCredentialsCommand:S}=await t.e(786).then(t.bind(t,10786)),p=g||new _(Object.assign({},c??{},{region:c?.region??a}));try{h=await p.send(new S({accountId:r,roleName:l,accessToken:m}))}catch(e){throw new o.mV(e,{tryNextLink:!1,logger:f})}let{roleCredentials:{accessKeyId:y,secretAccessKey:x,sessionToken:O,expiration:k,credentialScope:N}={}}=h;if(!y||!x||!O||!k)throw new o.mV("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:f});return{accessKeyId:y,secretAccessKey:x,sessionToken:O,expiration:new Date(k),credentialScope:N}},l=(e,s)=>{let{sso_start_url:t,sso_account_id:i,sso_region:r,sso_role_name:n}=e;if(!t||!i||!r||!n)throw new o.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e},g=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:t,ssoRegion:n,ssoRoleName:g,ssoSession:c}=e,{ssoClient:w}=e,f=(0,i.Jl)(e);if(s||t||n||g||c){if(s&&t&&n&&g)return a({ssoStartUrl:s,ssoSession:c,ssoAccountId:t,ssoRegion:n,ssoRoleName:g,ssoClient:w,clientConfig:e.clientConfig,profile:f});throw new o.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{let t=(await (0,i.MX)(e))[f];if(!t)throw new o.mV(`Profile ${f} was not found.`,{logger:e.logger});if(!r(t))throw new o.mV(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let r=(await (0,i.G)(e))[t.sso_session],a=` configurations in profile ${f} and sso-session ${t.sso_session}`;if(n&&n!==r.sso_region)throw new o.mV("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(s&&s!==r.sso_start_url)throw new o.mV("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});t.sso_region=r.sso_region,t.sso_start_url=r.sso_start_url}let{sso_start_url:g,sso_account_id:c,sso_region:d,sso_role_name:h,sso_session:u}=l(t,e.logger);return a({ssoStartUrl:g,ssoSession:u,ssoAccountId:c,ssoRegion:d,ssoRoleName:h,ssoClient:w,clientConfig:e.clientConfig,profile:f})}}}};