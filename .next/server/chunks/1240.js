"use strict";exports.id=1240,exports.ids=[1240],exports.modules={71240:(e,s,t)=>{t.d(s,{fromSSO:()=>c});var o=t(97110),r=t(39435);let i=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name);var n=t(71787);let a=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:a,ssoRoleName:l,ssoClient:c,clientConfig:w,profile:g,logger:f})=>{let h,d;let u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{let e=await (0,n.L)({profile:g})();h={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new o.mV(e.message,{tryNextLink:!1,logger:f})}else try{h=await (0,r.gH)(e)}catch(e){throw new o.mV(`The SSO session associated with this profile is invalid. ${u}`,{tryNextLink:!1,logger:f})}if(new Date(h.expiresAt).getTime()-Date.now()<=0)throw new o.mV(`The SSO session associated with this profile has expired. ${u}`,{tryNextLink:!1,logger:f});let{accessToken:p}=h,{SSOClient:S,GetRoleCredentialsCommand:m}=await t.e(3550).then(t.bind(t,83550)),_=c||new S(Object.assign({},w??{},{region:w?.region??a}));try{d=await _.send(new m({accountId:i,roleName:l,accessToken:p}))}catch(e){throw new o.mV(e,{tryNextLink:!1,logger:f})}let{roleCredentials:{accessKeyId:k,secretAccessKey:y,sessionToken:x,expiration:T,credentialScope:O}={}}=d;if(!k||!y||!x||!T)throw new o.mV("SSO returns an invalid temporary credential.",{tryNextLink:!1,logger:f});return{accessKeyId:k,secretAccessKey:y,sessionToken:x,expiration:new Date(T),credentialScope:O}},l=(e,s)=>{let{sso_start_url:t,sso_account_id:r,sso_region:i,sso_role_name:n}=e;if(!t||!r||!i||!n)throw new o.mV(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:s});return e},c=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");let{ssoStartUrl:s,ssoAccountId:t,ssoRegion:n,ssoRoleName:c,ssoSession:w}=e,{ssoClient:g}=e,f=(0,r.Jl)(e);if(s||t||n||c||w){if(s&&t&&n&&c)return a({ssoStartUrl:s,ssoSession:w,ssoAccountId:t,ssoRegion:n,ssoRoleName:c,ssoClient:g,clientConfig:e.clientConfig,profile:f});throw new o.mV('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{let t=(await (0,r.MX)(e))[f];if(!t)throw new o.mV(`Profile ${f} was not found.`,{logger:e.logger});if(!i(t))throw new o.mV(`Profile ${f} is not configured with SSO credentials.`,{logger:e.logger});if(t?.sso_session){let i=(await (0,r.G)(e))[t.sso_session],a=` configurations in profile ${f} and sso-session ${t.sso_session}`;if(n&&n!==i.sso_region)throw new o.mV("Conflicting SSO region"+a,{tryNextLink:!1,logger:e.logger});if(s&&s!==i.sso_start_url)throw new o.mV("Conflicting SSO start_url"+a,{tryNextLink:!1,logger:e.logger});t.sso_region=i.sso_region,t.sso_start_url=i.sso_start_url}let{sso_start_url:c,sso_account_id:w,sso_region:h,sso_role_name:d,sso_session:u}=l(t,e.logger);return a({ssoStartUrl:c,ssoSession:u,ssoAccountId:w,ssoRegion:h,ssoRoleName:d,ssoClient:g,clientConfig:e.clientConfig,profile:f})}}},71787:(e,s,t)=>{t.d(s,{L:()=>d});var o=t(97110),r=t(39435);let i="To refresh this SSO session run 'aws sso login' with the corresponding profile.",n={},a=async e=>{let{SSOOIDCClient:s}=await t.e(1741).then(t.bind(t,51741));if(n[e])return n[e];let o=new s({region:e});return n[e]=o,o},l=async(e,s)=>{let{CreateTokenCommand:o}=await t.e(1741).then(t.bind(t,51741));return(await a(s)).send(new o({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},c=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new o.rh(`Token is expired. ${i}`,!1)},w=(e,s,t=!1)=>{if(void 0===s)throw new o.rh(`Value not present for '${e}' in SSO Token${t?". Cannot refresh":""}. ${i}`,!1)},{writeFile:g}=t(57147).promises,f=(e,s)=>g((0,r.Py)(e),JSON.stringify(s,null,2)),h=new Date(0),d=(e={})=>async()=>{let s;e.logger?.debug("@aws-sdk/token-providers - fromSso");let t=await (0,r.MX)(e),n=(0,r.Jl)(e),a=t[n];if(a){if(!a.sso_session)throw new o.rh(`Profile '${n}' is missing required property 'sso_session'.`)}else throw new o.rh(`Profile '${n}' could not be found in shared credentials file.`,!1);let g=a.sso_session,d=(await (0,r.G)(e))[g];if(!d)throw new o.rh(`Sso session '${g}' could not be found in shared credentials file.`,!1);for(let e of["sso_start_url","sso_region"])if(!d[e])throw new o.rh(`Sso session '${g}' is missing required property '${e}'.`,!1);d.sso_start_url;let u=d.sso_region;try{s=await (0,r.gH)(g)}catch(e){throw new o.rh(`The SSO session token associated with profile=${n} was not found or is invalid. ${i}`,!1)}w("accessToken",s.accessToken),w("expiresAt",s.expiresAt);let{accessToken:p,expiresAt:S}=s,m={token:p,expiration:new Date(S)};if(m.expiration.getTime()-Date.now()>3e5)return m;if(Date.now()-h.getTime()<3e4)return c(m),m;w("clientId",s.clientId,!0),w("clientSecret",s.clientSecret,!0),w("refreshToken",s.refreshToken,!0);try{h.setTime(Date.now());let e=await l(s,u);w("accessToken",e.accessToken),w("expiresIn",e.expiresIn);let t=new Date(Date.now()+1e3*e.expiresIn);try{await f(g,{...s,accessToken:e.accessToken,expiresAt:t.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:t}}catch(e){return c(m),m}}}};