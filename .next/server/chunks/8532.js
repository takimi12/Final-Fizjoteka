"use strict";exports.id=8532,exports.ids=[8532],exports.modules={48532:(e,i,t)=>{t.d(i,{e:()=>S});var s=t(61401),n=t(75893),r=t(41966);t(39539);class a{constructor(e={}){this.data=e,this.lastPurgeTime=Date.now()}get(e){let i=this.data[e];if(i)return i}set(e,i){return this.data[e]=i,i}delete(e){delete this.data[e]}async purgeExpired(){let e=Date.now();if(!(this.lastPurgeTime+a.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS>e))for(let i in this.data){let t=this.data[i];if(!t.isRefreshing){let s=await t.identity;s.expiration&&s.expiration.getTime()<e&&delete this.data[i]}}}}a.EXPIRED_CREDENTIAL_PURGE_INTERVAL_MS=3e4;class o{constructor(e,i=!1,t=Date.now()){this._identity=e,this.isRefreshing=i,this.accessed=t}get identity(){return this.accessed=Date.now(),this._identity}}class g{constructor(e,i=new a){this.createSessionFn=e,this.cache=i}async getS3ExpressIdentity(e,i){let t=i.Bucket,{cache:s}=this,n=s.get(t);return n?n.identity.then(e=>(e.expiration?.getTime()??0)<Date.now()?s.set(t,new o(this.getIdentity(t))).identity:((e.expiration?.getTime()??0)<Date.now()+g.REFRESH_WINDOW_MS&&!n.isRefreshing&&(n.isRefreshing=!0,this.getIdentity(t).then(e=>{s.set(t,new o(Promise.resolve(e)))})),e)):s.set(t,new o(this.getIdentity(t))).identity}async getIdentity(e){await this.cache.purgeExpired().catch(e=>{console.warn("Error while clearing expired entries in S3ExpressIdentityCache: \n"+e)});let i=await this.createSessionFn(e);if(!i.Credentials?.AccessKeyId||!i.Credentials?.SecretAccessKey)throw Error("s3#createSession response credential missing AccessKeyId or SecretAccessKey.");return{accessKeyId:i.Credentials.AccessKeyId,secretAccessKey:i.Credentials.SecretAccessKey,sessionToken:i.Credentials.SessionToken,expiration:i.Credentials.Expiration?new Date(i.Credentials.Expiration):void 0}}}g.REFRESH_WINDOW_MS=6e4;var c=t(81761);t(33121);let d="X-Amz-S3session-Token",h=d.toLowerCase();class l extends c.L1{async signWithCredentials(e,i,t){let s=u(i);return e.headers[h]=i.sessionToken,p(this,s),this.signRequest(e,t??{})}async presignWithCredentials(e,i,t){let s=u(i);return delete e.headers[h],e.headers[d]=i.sessionToken,e.query=e.query??{},e.query[d]=i.sessionToken,p(this,s),this.presign(e,t)}}function u(e){return{accessKeyId:e.accessKeyId,secretAccessKey:e.secretAccessKey,expiration:e.expiration}}function p(e,i){let t=setTimeout(()=>{throw Error("SignatureV4S3Express credential override was created but not called.")},10),s=e.credentialProvider;e.credentialProvider=()=>(clearTimeout(t),e.credentialProvider=s,Promise.resolve(i))}let w={CrtSignerV4:null};class y{constructor(e){this.sigv4Signer=new l(e),this.signerOptions=e}async sign(e,i={}){if("*"===i.signingRegion){if("node"!==this.signerOptions.runtime)throw Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");return this.getSigv4aSigner().sign(e,i)}return this.sigv4Signer.sign(e,i)}async signWithCredentials(e,i,t={}){if("*"===t.signingRegion){if("node"!==this.signerOptions.runtime)throw Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");return this.getSigv4aSigner().signWithCredentials(e,i,t)}return this.sigv4Signer.signWithCredentials(e,i,t)}async presign(e,i={}){if("*"===i.signingRegion){if("node"!==this.signerOptions.runtime)throw Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");return this.getSigv4aSigner().presign(e,i)}return this.sigv4Signer.presign(e,i)}async presignWithCredentials(e,i,t={}){if("*"===t.signingRegion)throw Error("Method presignWithCredentials is not supported for [signingRegion=*].");return this.sigv4Signer.presignWithCredentials(e,i,t)}getSigv4aSigner(){if(!this.sigv4aSigner){let e=null;try{if(e=w.CrtSignerV4,"function"!=typeof e)throw Error()}catch(e){throw e.message=`${e.message}
Please check whether you have installed the "@aws-sdk/signature-v4-crt" package explicitly. 
You must also register the package by calling [require("@aws-sdk/signature-v4-crt");] or an ESM equivalent such as [import "@aws-sdk/signature-v4-crt";]. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`,e}this.sigv4aSigner=new e({...this.signerOptions,signingAlgorithm:1})}return this.sigv4aSigner}}class m{constructor(e){let i={service:e.signingName||e.service||"s3",uriEscapePath:e.uriEscapePath||!1,applyChecksum:e.applyChecksum||!1,...e};this.signer=new y(i)}presign(e,{unsignableHeaders:i=new Set,unhoistableHeaders:t=new Set,...s}={}){return this.prepareRequest(e,{unsignableHeaders:i,unhoistableHeaders:t}),this.signer.presign(e,{expiresIn:900,unsignableHeaders:i,unhoistableHeaders:t,...s})}presignWithCredentials(e,i,{unsignableHeaders:t=new Set,unhoistableHeaders:s=new Set,...n}={}){return this.prepareRequest(e,{unsignableHeaders:t,unhoistableHeaders:s}),this.signer.presignWithCredentials(e,i,{expiresIn:900,unsignableHeaders:t,unhoistableHeaders:s,...n})}prepareRequest(e,{unsignableHeaders:i=new Set,unhoistableHeaders:t=new Set}={}){i.add("content-type"),Object.keys(e.headers).map(e=>e.toLowerCase()).filter(e=>e.startsWith("x-amz-server-side-encryption")).forEach(e=>{t.add(e)}),e.headers["X-Amz-Content-Sha256"]="UNSIGNED-PAYLOAD";let s=e.headers.host,n=e.port,r=`${e.hostname}${null!=e.port?":"+n:""}`;s&&(s!==e.hostname||null==e.port)||(e.headers.host=r)}}let S=async(e,i,t={})=>{let a,o;if("function"==typeof e.config.endpointProvider){let t=await (0,n.UM)(i.input,i.constructor,e.config),s=t.properties?.authSchemes?.[0];o=s?.name==="sigv4a"?s?.signingRegionSet?.join(","):s?.signingRegion,a=new m({...e.config,signingName:s?.signingName,region:async()=>o})}else a=new m(e.config);let g=e.middlewareStack.clone();g.addRelativeTo((e,i)=>async e=>{let{request:s}=e;if(!r.aW.isInstance(s))throw Error("Request to be presigned is not an valid HTTP request.");delete s.headers["amz-sdk-invocation-id"],delete s.headers["amz-sdk-request"],delete s.headers["x-amz-user-agent"];let n={...t,signingRegion:t.signingRegion??i.signing_region??o,signingService:t.signingService??i.signing_service};return{response:{},output:{$metadata:{httpStatusCode:200},presigned:i.s3ExpressIdentity?await a.presignWithCredentials(s,i.s3ExpressIdentity,n):await a.presign(s,n)}}},{name:"presignInterceptMiddleware",relation:"before",toMiddleware:"awsAuthMiddleware",override:!0});let c=i.resolveMiddleware(g,e.config,{}),{output:d}=await c({input:i.input}),{presigned:h}=d;return function(e){let{port:i,query:t}=e,{protocol:n,path:r,hostname:a}=e;n&&":"!==n.slice(-1)&&(n+=":"),i&&(a+=`:${i}`),r&&"/"!==r.charAt(0)&&(r=`/${r}`);let o=t?(0,s.I)(t):"";o&&"?"!==o[0]&&(o=`?${o}`);let g="";if(null!=e.username||null!=e.password){let i=e.username??"",t=e.password??"";g=`${i}:${t}@`}let c="";return e.fragment&&(c=`#${e.fragment}`),`${n}//${g}${a}${r}${o}${c}`}(h)}}};